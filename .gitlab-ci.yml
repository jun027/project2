stages:
  - test
  - build
  - publish
  - deploy
  - deploy-prod

# go test??
run-tests:
  stage: test
  tags:
    - aws-pulian
  script:
    - echo "test gitlab runner haha"

# build for develop branch
build-docker-image-develop:
  stage: build
  only:
    - develop
  tags:
    - aws-pulian
  needs:
    - run-tests
  script:
    - echo "Building Docker image for production environment"
    - docker build --build-arg MODULES_TOKEN=$MODULES_TOKEN --build-arg NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL --build-arg NEXT_PUBLIC_GOOGLE_REDIRECT_URI=$GOOGLE_REDIRECT_URL --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID -t $CI_REGISTRY_IMAGE:develop-$CI_PIPELINE_IID .
    - docker tag $CI_REGISTRY_IMAGE:develop-$CI_PIPELINE_IID $CI_REGISTRY_IMAGE:develop-latest
    - docker save $CI_REGISTRY_IMAGE:develop-$CI_PIPELINE_IID -o image-develop.tar
  artifacts:
    paths:
      - image-develop.tar
    expire_in: 1 hour

# build for master branch (production)
build-docker-image-master:
  stage: build
  only:
    - master
  tags:
    - aws-pulian
  needs:
    - run-tests
  script:
    - echo "Building Docker image for production environment"
    - docker build --build-arg MODULES_TOKEN=$MODULES_TOKEN --build-arg NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL --build-arg NEXT_PUBLIC_GOOGLE_REDIRECT_URI=$PROD_GOOGLE_REDIRECT_URL --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=$PROD_GOOGLE_CLIENT_ID -t $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_IID .
    - docker tag $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_IID $CI_REGISTRY_IMAGE:prod-latest
    - docker save $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_IID -o image-prod.tar
  artifacts:
    paths:
      - image-prod.tar
    expire_in: 1 hour

# publish for develop
push-to-registry-develop:
  stage: publish
  only:
    - develop
  tags:
    - aws-pulian
  needs:
    - build-docker-image-develop
  artifacts:
    paths:
      - image-develop.tar
    expire_in: 1 hour
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Publishing Docker image for develop"
    - docker load -i image-develop.tar
    - docker push $CI_REGISTRY_IMAGE:develop-$CI_PIPELINE_IID
    - docker tag $CI_REGISTRY_IMAGE:develop-$CI_PIPELINE_IID $CI_REGISTRY_IMAGE:develop-latest
    - docker push $CI_REGISTRY_IMAGE:develop-latest

# publish for production
push-to-registry-prod:
  stage: publish
  only:
    - master
  tags:
    - aws-pulian
  needs:
    - build-docker-image-master
  artifacts:
    paths:
      - image-prod.tar
    expire_in: 1 hour
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Publishing Docker image for production"
    - docker load -i image-prod.tar
    - docker push $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_IID
    - docker tag $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_IID $CI_REGISTRY_IMAGE:prod-latest
    - docker push $CI_REGISTRY_IMAGE:prod-latest

# deploy to aws machine
deploy-to-aws-develop:
  stage: deploy
  only:
    - develop
  tags:
    - aws-pulian
  needs:
    - push-to-registry-develop
  before_script:
    - cat $AWS_PRIVATE_KEY > private_key.pem
    - chmod 400 private_key.pem
  script:
    - echo "Deploying to AWS"
    - echo $BASE_URL
    - scp -i private_key.pem -o StrictHostKeyChecking=no ./docker-compose.yml $AWS_USER@$AWS_SERVER:/home/ec2-user
    - ssh -o StrictHostKeyChecking=no -i private_key.pem $AWS_USER@$AWS_SERVER "
      export IMAGE_NAME=$CI_REGISTRY_IMAGE:develop-latest &&
      export COMPOSE_PROJECT_NAME=web &&
      export Port=8000 &&
      export Environment=dev &&
      export APP_PORT=8000 &&
      export BASE_URL=$BASE_URL &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d
      "

# deploy to production (manual)
deploy_to_production:
  stage: deploy-prod
  only:
    - master
  tags:
    - aws-pulian
  needs:
    - push-to-registry-prod
  when: manual
  before_script:
    - cat $AWS_PROD_PRIVATE_KEY > private_key_prod.pem
    - chmod 400 private_key_prod.pem
  script:
    - echo "Deploying to Production AWS Server"
    - scp -i private_key_prod.pem -o StrictHostKeyChecking=no ./docker-compose.yml $AWS_PROD_USER@$AWS_PROD_SERVER:/home/ec2-user
    - ssh -o StrictHostKeyChecking=no -i private_key_prod.pem $AWS_PROD_USER@$AWS_PROD_SERVER "
      export IMAGE_NAME=$CI_REGISTRY_IMAGE:prod-latest &&
      export COMPOSE_PROJECT_NAME=web &&
      export Port=8000 &&
      export Environment=prod &&
      export APP_PORT=8000 &&
      export BASE_URL=$BASE_URL &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d
      "
